/** 
 * @file llcurrencywrapper.h
 * @brief Currency wrapping class from the tea viewer helper library
 *
 * Copyright (C) 2012 arminweatherwax (at) lavabit.com
 * Copyright (C) 2015 Cinder Roxley <cinder@sdf.org>
 * You can use it under the following license:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef LL_CURRENCYWRAPPER_H
#define LL_CURRENCYWRAPPER_H

#include "llsingleton.h"
#include <string>
#include <boost/signals2.hpp>

class LLCurrencyWrapper final : public LLSingleton<LLCurrencyWrapper>
{
	LLSINGLETON_EMPTY_CTOR(LLCurrencyWrapper);

public:
    void setCurrency(const std::string& currency);
    void setHomeCurrency(const std::string& currency);
    const std::string& getCurrency() const { return mCurrency; }
    const std::string& getHomeCurrency() const { return mHomeCurrency; }
    std::string wrapCurrency(const std::string& to_substitute) const;
    void wrapCurrency(std::string& to_substitute) const;

    using currency_changed_signal_t = boost::signals2::signal<void()>;
    using currency_changed_callback_t = std::function<void()>;

    boost::signals2::connection addCurrencyChangedCb(currency_changed_callback_t cb);
    void removeCurrencyChangedCb(boost::signals2::connection cb);

private:	
	std::string mCurrency;
    std::string mHomeCurrency;
    currency_changed_signal_t mChangedSignal;
};

#endif //LL_CURRENCYWRAPPER_H
