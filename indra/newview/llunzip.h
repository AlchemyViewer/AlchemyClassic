/**
 * @file llunzip.h
 * @brief Minizip wrapper
 *
 * Copyright (c) 2015, Cinder Roxley <cinder@sdf.org>
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef LL_UNZIP_H
#define LL_UNZIP_H

extern "C"
{
#include <minizip/unzip.h>
}

class LLUnZip
{
public:
	LLUnZip(const std::string& filename);
	~LLUnZip();
	
	/* ===============================================================
	 * @name Archive manipulation functions
	 * @{
	 */
	
	/// Extracts the archive to a filesystem path
	bool extract(const std::string& path);
	
	/// Extracts a single file from the archive into a memory buffer
	bool extractFile(const std::string& file_to_extract, char *buf, size_t bufsize);
	
	/// Returns the uncompressed size of a file within the archive
	size_t getSizeFile(const std::string& file_to_size);
	
	/// Returns true if the archive is valid
	bool isValid() { return mValid; }
	
	//@}
	
private:
	unzFile open(const std::string& filename);
	void close();
	S32 extractCurrentFile(const std::string& path);
	
	unzFile mZipfile;
	std::string mFilename;
	bool mValid;
};

#endif // LL_UNZIP_H
